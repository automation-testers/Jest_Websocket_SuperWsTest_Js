/// <reference types="node" />
import { Allure, AllureGroup, AllureStep, AllureTest, Attachment, Category, ContentType, ExecutableItemWrapper, IAllureConfig, LinkType, Severity, Stage, Status, StatusDetails, StepInterface } from 'allure-js-commons';
import { AllureReporterApi, jasmine_ } from './index';
export declare const dateStr: () => string;
export declare const dateStrShort: () => string;
export declare class AllureReporter extends Allure implements AllureReporterApi {
    private runningTest;
    private runningGroup;
    private groupNameStack;
    private stepStack;
    private currentStepStatus;
    private featureForSuite;
    private storyForSuite;
    private featureForTest;
    private storyForTest;
    private environmentInfo;
    constructor(config?: IAllureConfig);
    get currentGroup(): AllureGroup;
    get currentTest(): AllureTest;
    protected get currentExecutable(): ExecutableItemWrapper;
    startGroup(name: string): void;
    startTest(spec: jasmine_.CustomReporterResult): void;
    startStep(name: string, start?: number): AllureStep;
    stepStatus(status: Status, details?: StatusDetails | any): void;
    private getAttachFile;
    endStep(status?: Status, stage?: Stage, details?: StatusDetails | any, end?: number): void;
    private endSteps;
    private applyGroupping;
    endTest(spec: jasmine_.CustomReporterResult): void;
    get currentStep(): AllureStep | null;
    writeCategories(categories: Category[]): void;
    endGroup(): void;
    private findMessageAboutThrow;
    private findAnyError;
    step<T>(name: string, body?: (step: StepInterface) => T, start?: number, ...args: any[]): any;
    addEnvironment(name: string, value: string): this;
    writeAttachment(content: Buffer | string, type: ContentType): string;
    logStep(name: string, status: Status, attachments?: [Attachment]): void;
    attachment(name: string, content: Buffer | string, type: ContentType): void;
    stepAttachement(name: string, content: Buffer | string, type: ContentType): void;
    addPackage(value: string): this;
    addParameter(name: string, value: string): this;
    addParameters(...params: [string, any][]): this;
    addTestPathParameter(relativeFrom: string, spec: jasmine_.CustomReporterResult): this;
    addLink(options: {
        name?: string;
        url: string;
        type?: LinkType;
    }): this;
    addIssue(options: {
        id: string;
        name?: string;
        url?: string;
    }): this;
    addTms(options: {
        id: string;
        name?: string;
        url?: string;
    }): this;
    addAttachment(name: string, buffer: any, type: ContentType): this;
    addTestAttachment(name: string, buffer: any, type: ContentType): this;
    addLabel(name: string, value: string): this;
    description(description: string): this;
    descriptionHtml(description: string): this;
    feature(feature: string): this;
    story(story: string): this;
    tag(tag: string): void;
    owner(owner: string): void;
    lead(lead: string): void;
    framework(framework: string): void;
    language(language: string): void;
    as_id(id: string): void;
    host(host: string): void;
    testClass(testClass: string): void;
    testMethod(testMethod: string): void;
    severity(severity: Severity): void;
}
